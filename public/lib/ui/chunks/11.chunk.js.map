{"version":3,"sources":["webpack:///./src/ui/src/components/PageManipulationOverlay/PageManipulationControls/PageManipulationControls.js","webpack:///./src/ui/src/components/PageManipulationOverlay/PageManipulationControls/PageManipulationControlsContainer.js","webpack:///./src/ui/src/components/PageManipulationOverlay/PageManipulationControls/index.js"],"names":["PageManipulationControls","props","t","useTranslation","deletePages","extractPages","insertPages","replacePages","DataElementWrapper","dataElement","className","onClick","Button","title","img","role","propTypes","pageNumbers","PropTypes","arrayOf","number","warn","bool","PageManipulationControlsContainer","dispatch","useDispatch","isPageDeletionConfirmationModalEnabled","useSelector","state","selectors","pageDeletionConfirmationModalEnabled","openInsertPageModal","actions","closeElement","DataElements","PAGE_MANIPULATION_OVERLAY","openElement","noPagesSelectedWarning","isMobile","replace"],"mappings":"4NAsEeA,MAjEf,SAAkCC,GAChC,IAAQC,EAAMC,cAAND,EACAE,EAAyDH,EAAzDG,YAAaC,EAA4CJ,EAA5CI,aAAcC,EAA8BL,EAA9BK,YAAaC,EAAiBN,EAAjBM,aAEhD,OACE,oCACE,kBAACC,EAAA,EAAkB,CACjBC,YAAY,yBACZC,UAAU,QAETR,EAAE,4BAEL,kBAACM,EAAA,EAAkB,CACjBE,UAAU,MACVD,YAAY,aACZE,QAASL,GAET,kBAACM,EAAA,EAAM,CACLC,MAAM,gBACNC,IAAI,6BACJC,KAAK,WAEP,yBAAKL,UAAU,SAASR,EAAE,mBAE5B,kBAACM,EAAA,EAAkB,CACjBE,UAAU,MACVD,YAAY,cACZE,QAASJ,GAET,kBAACK,EAAA,EAAM,CACLC,MAAM,iBACNC,IAAI,wBACJC,KAAK,WAEP,yBAAKL,UAAU,SAASR,EAAE,oBAE5B,kBAACM,EAAA,EAAkB,CACjBE,UAAU,MACVD,YAAY,cACZE,QAASN,GAET,kBAACO,EAAA,EAAM,CACLC,MAAM,iBACNC,IAAI,iCACJC,KAAK,WAEP,yBAAKL,UAAU,SAASR,EAAE,oBAE5B,kBAACM,EAAA,EAAkB,CACjBC,YAAY,aACZC,UAAU,MACVC,QAASP,GAET,kBAACQ,EAAA,EAAM,CACLC,MAAM,gBACNC,IAAI,mBACJC,KAAK,WAEP,yBAAKL,UAAU,SAASR,EAAE,qB,8kCCrDlC,IAAMc,EAAY,CAChBC,YAAaC,IAAUC,QAAQD,IAAUE,QACzCC,KAAMH,IAAUI,MAGlB,SAASC,EAAkCtB,GACzC,IAAMuB,EAAWC,cACTR,EAAsBhB,EAAtBgB,YAAaI,EAASpB,EAAToB,KACdK,EAEL,EAF+CC,aAAY,SAACC,GAAK,MAAK,CACtEC,IAAUC,qCAAqCF,OAC/C,GAF2C,GAIvCG,EAAsB,WAC1BP,EAASQ,IAAQC,aAAaC,IAAaC,4BAC3CX,EAASQ,IAAQI,YAAY,qBAqC/B,OACE,kBAAC,EAAwB,CACvB9B,YApCa,WACXe,GACDgB,YAAuBpB,EAAaO,IAAaO,IAElDA,IAEFO,eAAcd,EAASQ,IAAQC,aAAaC,IAAaC,6BA+BvD/B,YAZa,WACXiB,GACDgB,YAAuBpB,EAAaO,IAAapB,YAAYa,EAAaO,EAAUE,GAErFtB,YAAYa,EAAaO,EAAUE,GAErCY,eAAcd,EAASQ,IAAQC,aAAaC,IAAaC,6BAOvD9B,aArBc,WACZgB,GACDgB,YAAuBpB,EAAaO,IAAanB,YAAaY,EAAaO,GAE5EnB,YAAaY,EAAaO,GAE5Bc,eAAcd,EAASQ,IAAQC,aAAaC,IAAaC,6BAgBvD5B,aA9Bc,WACZc,GACDgB,YAAuBpB,EAAaO,IAAae,YAAQf,GAE1De,YAAQf,GAEVc,eAAcd,EAASQ,IAAQC,aAAaC,IAAaC,+BA6B7DZ,EAAkCP,UAAYA,EAE/BO,QCvEAvB","file":"chunks/11.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DataElementWrapper from 'components/DataElementWrapper';\nimport Button from 'components/Button';\n\nfunction PageManipulationControls(props) {\n  const { t } = useTranslation();\n  const { deletePages, extractPages, insertPages, replacePages } = props;\n\n  return (\n    <>\n      <DataElementWrapper\n        dataElement=\"pageManipulationHeader\"\n        className=\"type\"\n      >\n        {t('action.pageManipulation')}\n      </DataElementWrapper>\n      <DataElementWrapper\n        className=\"row\"\n        dataElement=\"insertPage\"\n        onClick={insertPages}\n      >\n        <Button\n          title=\"action.insert\"\n          img=\"icon-page-insertion-insert\"\n          role=\"option\"\n        />\n        <div className=\"title\">{t('action.insert')}</div>\n      </DataElementWrapper>\n      <DataElementWrapper\n        className=\"row\"\n        dataElement=\"replacePage\"\n        onClick={replacePages}\n      >\n        <Button\n          title=\"action.replace\"\n          img=\"icon-page-replacement\"\n          role=\"option\"\n        />\n        <div className=\"title\">{t('action.replace')}</div>\n      </DataElementWrapper>\n      <DataElementWrapper\n        className=\"row\"\n        dataElement=\"extractPage\"\n        onClick={extractPages}\n      >\n        <Button\n          title=\"action.extract\"\n          img=\"icon-page-manipulation-extract\"\n          role=\"option\"\n        />\n        <div className=\"title\">{t('action.extract')}</div>\n      </DataElementWrapper>\n      <DataElementWrapper\n        dataElement=\"deletePage\"\n        className=\"row\"\n        onClick={deletePages}\n      >\n        <Button\n          title=\"action.delete\"\n          img=\"icon-delete-line\"\n          role=\"option\"\n        />\n        <div className=\"title\">{t('action.delete')}</div>\n      </DataElementWrapper>\n    </>\n  );\n}\n\n\nexport default PageManipulationControls;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport PageManipulationControls from './PageManipulationControls';\nimport { deletePages, extractPages, noPagesSelectedWarning, replace } from 'helpers/pageManipulationFunctions';\nimport PropTypes from 'prop-types';\nimport actions from 'actions';\nimport { isMobile } from 'helpers/device';\nimport DataElements from 'constants/dataElement';\n\nconst propTypes = {\n  pageNumbers: PropTypes.arrayOf(PropTypes.number),\n  warn: PropTypes.bool,\n};\n\nfunction PageManipulationControlsContainer(props) {\n  const dispatch = useDispatch();\n  const { pageNumbers, warn } = props;\n  const [isPageDeletionConfirmationModalEnabled] = useSelector((state) => [\n    selectors.pageDeletionConfirmationModalEnabled(state),\n  ]);\n\n  const openInsertPageModal = () => {\n    dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n    dispatch(actions.openElement('insertPageModal'));\n  };\n\n  const onInsert = () => {\n    if (warn) {\n      !noPagesSelectedWarning(pageNumbers, dispatch) && openInsertPageModal();\n    } else {\n      openInsertPageModal();\n    }\n    isMobile() && dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n  };\n\n  const onReplace = () => {\n    if (warn) {\n      !noPagesSelectedWarning(pageNumbers, dispatch) && replace(dispatch);\n    } else {\n      replace(dispatch);\n    }\n    isMobile() && dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n  };\n  const onExtract = () => {\n    if (warn) {\n      !noPagesSelectedWarning(pageNumbers, dispatch) && extractPages(pageNumbers, dispatch);\n    } else {\n      extractPages(pageNumbers, dispatch);\n    }\n    isMobile() && dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n  };\n  const onDelete = () => {\n    if (warn) {\n      !noPagesSelectedWarning(pageNumbers, dispatch) && deletePages(pageNumbers, dispatch, isPageDeletionConfirmationModalEnabled);\n    } else {\n      deletePages(pageNumbers, dispatch, isPageDeletionConfirmationModalEnabled);\n    }\n    isMobile() && dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n  };\n\n  return (\n    <PageManipulationControls\n      insertPages={onInsert}\n      deletePages={onDelete}\n      extractPages={onExtract}\n      replacePages={onReplace}\n    />\n  );\n}\n\nPageManipulationControlsContainer.propTypes = propTypes;\n\nexport default PageManipulationControlsContainer;","import PageManipulationControls from './PageManipulationControlsContainer';\n\nexport default PageManipulationControls;"],"sourceRoot":""}