{"version":3,"sources":["webpack:///./src/ui/src/constants/displayModeObjects.js","webpack:///./src/ui/src/components/ViewControlsOverlay/ViewControlsOverlay.js","webpack:///./src/ui/src/components/ViewControlsOverlay/index.js"],"names":["displayMode","pageTransition","layout","ViewControlsOverlay","t","useTranslation","store","useStore","useSelector","state","selectors","getTotalPages","getDisplayMode","isElementDisabled","DataElements","VIEW_CONTROLS_OVERLAY","isReaderMode","isMultiViewerMode","isFullScreen","getActiveDocumentViewerKey","getIsMultiTab","totalPages","isDisabled","activeDocumentViewerKey","isMultiTab","isPageTransitionEnabled","documentViewer","core","getDocumentViewer","displayModeManager","getDisplayModeManager","isVirtualDisplayEnabled","showCompareButton","isIE11","handleClick","setDisplayMode","displayModeObject","displayModeObjects","find","obj","exitReaderMode","setTimeout","showReaderButton","isFullPDFEnabled","getDocument","getType","FlyoutMenu","menu","trigger","VIEW_CONTROLS_OVERLAY_BUTTON","ariaLabel","DataElementWrapper","dataElement","className","classNames","row","active","onClick","Button","title","img","isActive","role","enterReaderMode","rotateClockwise","ActionButton","rotateCounterClockwise","dispatch","actions","setIsMultiViewerMode","isIOS","isIOSFullScreenSupported","toggleFullscreen"],"mappings":"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","file":"chunks/60.chunk.js","sourcesContent":["export default [\n  {\n    displayMode: 'Single',\n    pageTransition: 'default',\n    layout: 'single',\n  },\n  {\n    displayMode: 'Continuous',\n    pageTransition: 'continuous',\n    layout: 'single',\n  },\n  {\n    displayMode: 'Facing',\n    pageTransition: 'default',\n    layout: 'double',\n  },\n  {\n    displayMode: 'FacingContinuous',\n    pageTransition: 'continuous',\n    layout: 'double',\n  },\n  {\n    displayMode: 'CoverFacing',\n    pageTransition: 'default',\n    layout: 'cover',\n  },\n  {\n    displayMode: 'Cover',\n    pageTransition: 'continuous',\n    layout: 'cover',\n  },\n];","import classNames from 'classnames';\nimport ActionButton from 'components/ActionButton';\nimport Button from 'components/Button';\nimport displayModeObjects from 'constants/displayModeObjects';\nimport core from 'core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector, useStore } from 'react-redux';\nimport selectors from 'selectors';\nimport FlyoutMenu from '../FlyoutMenu/FlyoutMenu';\nimport DataElementWrapper from 'components/DataElementWrapper';\nimport { enterReaderMode, exitReaderMode } from 'helpers/readerMode';\nimport actions from 'actions';\nimport toggleFullscreen from 'helpers/toggleFullscreen';\nimport DataElements from 'src/constants/dataElement';\nimport { isIE11, isIOS, isIOSFullScreenSupported } from 'helpers/device';\n\nfunction ViewControlsOverlay() {\n  const [t] = useTranslation();\n  const store = useStore();\n\n  const [\n    totalPages,\n    displayMode,\n    isDisabled,\n    isReaderMode,\n    isMultiViewerMode,\n    isFullScreen,\n    activeDocumentViewerKey,\n    isMultiTab,\n  ] = useSelector((state) => [\n    selectors.getTotalPages(state),\n    selectors.getDisplayMode(state),\n    selectors.isElementDisabled(state, DataElements.VIEW_CONTROLS_OVERLAY),\n    selectors.isReaderMode(state),\n    selectors.isMultiViewerMode(state),\n    selectors.isFullScreen(state),\n    selectors.getActiveDocumentViewerKey(state),\n    selectors.getIsMultiTab(state)\n  ]);\n\n  const totalPageThreshold = 1000;\n  let isPageTransitionEnabled = totalPages < totalPageThreshold;\n\n  const documentViewer = core.getDocumentViewer();\n  const displayModeManager = documentViewer?.getDisplayModeManager();\n  if (displayModeManager && displayModeManager.isVirtualDisplayEnabled()) {\n    isPageTransitionEnabled = true;\n  }\n\n  const showCompareButton = !isIE11 && !isMultiTab;\n  const toggleCompareMode = () => {\n    store.dispatch(actions.setIsMultiViewerMode(!isMultiViewerMode));\n  };\n\n  const handleClick = (pageTransition, layout) => {\n    const setDisplayMode = () => {\n      const displayModeObject = displayModeObjects.find(\n        (obj) => obj.pageTransition === pageTransition && obj.layout === layout,\n      );\n      core.setDisplayMode(displayModeObject.displayMode);\n    };\n\n    if (isReaderMode) {\n      exitReaderMode(store);\n      setTimeout(() => {\n        setDisplayMode();\n      });\n    } else {\n      setDisplayMode();\n    }\n  };\n\n  const handleReaderModeClick = () => {\n    if (isReaderMode) {\n      return;\n    }\n    enterReaderMode(store);\n  };\n\n  if (isDisabled) {\n    return null;\n  }\n\n  let pageTransition;\n  let layout;\n\n  const displayModeObject = displayModeObjects.find((obj) => obj.displayMode === displayMode);\n  if (displayModeObject) {\n    pageTransition = displayModeObject.pageTransition;\n    layout = displayModeObject.layout;\n  }\n\n  const showReaderButton = core.isFullPDFEnabled() && core.getDocument()?.getType() === 'pdf';\n  // Full screen is supported in iPad OS for non-video elements, but not in iOS\n  const renderFullScreenToggle = () => {\n    if (isIOS && !isIOSFullScreenSupported) {\n      return null;\n    }\n    return (\n      <>\n        <DataElementWrapper\n          dataElement=\"viewControlsDivider3\"\n          className=\"divider\"\n        />\n        <DataElementWrapper\n          className=\"row\"\n          onClick={toggleFullscreen}\n          dataElement=\"fullScreenButton\"\n        >\n          <Button\n            img={isFullScreen ? 'icon-header-full-screen-exit' : 'icon-header-full-screen'}\n            role=\"option\"\n          />\n          <div className=\"title\">{isFullScreen ? t('action.exitFullscreen') : t('action.enterFullscreen')}</div>\n        </DataElementWrapper>\n      </>\n    );\n  };\n\n  return (\n    <FlyoutMenu\n      menu={DataElements.VIEW_CONTROLS_OVERLAY}\n      trigger={DataElements.VIEW_CONTROLS_OVERLAY_BUTTON}\n      ariaLabel={t('component.viewControlsOverlay')}\n    >\n      {isPageTransitionEnabled && (\n        <>\n          <DataElementWrapper\n            dataElement=\"pageTransitionHeader\"\n            className=\"type\"\n          >\n            {t('option.displayMode.pageTransition')}\n          </DataElementWrapper>\n          <DataElementWrapper\n            className={classNames({ row: true, active: (pageTransition === 'continuous' && !isReaderMode) })}\n            onClick={() => handleClick('continuous', layout)}\n            dataElement=\"continuousPageTransitionButton\"\n          >\n            <Button\n              title=\"option.pageTransition.continuous\"\n              img=\"icon-header-page-manipulation-page-transition-continuous-page-line\"\n              isActive={pageTransition === 'continuous' && !isReaderMode}\n              role=\"option\"\n            />\n            <div className=\"title\">{t('option.pageTransition.continuous')}</div>\n          </DataElementWrapper>\n          <DataElementWrapper\n            className={classNames({ row: true, active: (pageTransition === 'default' && !isReaderMode) })}\n            onClick={() => handleClick('default', layout)}\n            dataElement=\"defaultPageTransitionButton\"\n          >\n            <Button\n              title=\"option.pageTransition.default\"\n              img=\"icon-header-page-manipulation-page-transition-page-by-page-line\"\n              isActive={pageTransition === 'default' && !isReaderMode}\n              role=\"option\"\n            />\n            <div className=\"title\">{t('option.pageTransition.default')}</div>\n          </DataElementWrapper>\n          {showReaderButton && (\n            <DataElementWrapper\n              className={classNames({ row: true, active: isReaderMode })}\n              onClick={() => handleReaderModeClick()}\n              dataElement=\"readerPageTransitionButton\"\n            >\n              <Button\n                title=\"option.pageTransition.reader\"\n                img=\"icon-header-page-manipulation-page-transition-reader\"\n                isActive={isReaderMode}\n                role=\"option\"\n              />\n              <div className=\"title\">{t('option.pageTransition.reader')}</div>\n            </DataElementWrapper>\n          )}\n          {!isReaderMode && (\n            <DataElementWrapper\n              dataElement=\"viewControlsDivider1\"\n              className=\"divider\"\n            />\n          )}\n        </>\n      )}\n      {!isReaderMode && (\n        <>\n          <DataElementWrapper\n            dataElement=\"rotateHeader\"\n            className=\"type\"\n          >\n            {t('action.rotate')}\n          </DataElementWrapper>\n          <DataElementWrapper className=\"row\" onClick={() => core.rotateClockwise(activeDocumentViewerKey)} dataElement=\"rotateClockwiseButton\">\n            <ActionButton\n              title=\"action.rotateClockwise\"\n              img=\"icon-header-page-manipulation-page-rotation-clockwise-line\"\n              role=\"option\"\n            />\n            <div className=\"title\">{t('action.rotateClockwise')}</div>\n          </DataElementWrapper>\n          <DataElementWrapper className=\"row\" onClick={() => core.rotateCounterClockwise(activeDocumentViewerKey)} dataElement=\"rotateCounterClockwiseButton\">\n            <ActionButton\n              title=\"action.rotateCounterClockwise\"\n              img=\"icon-header-page-manipulation-page-rotation-counterclockwise-line\"\n              role=\"option\"\n            />\n            <div className=\"title\">{t('action.rotateCounterClockwise')}</div>\n          </DataElementWrapper>\n          <DataElementWrapper\n            dataElement=\"viewControlsDivider2\"\n            className=\"divider\"\n          />\n          <DataElementWrapper\n            dataElement=\"layoutHeader\"\n            className=\"type\"\n          >\n            {t('option.displayMode.layout')}\n          </DataElementWrapper>\n          <DataElementWrapper\n            className={classNames({ row: true, active: layout === 'single' })}\n            onClick={() => handleClick(pageTransition, 'single')}\n            dataElement=\"singleLayoutButton\"\n          >\n            <Button\n              title=\"option.layout.single\"\n              img=\"icon-header-page-manipulation-page-layout-single-page-line\"\n              isActive={layout === 'single'}\n              role=\"option\"\n            />\n            <div className=\"title\">{t('option.layout.single')}</div>\n          </DataElementWrapper>\n          <DataElementWrapper\n            className={classNames({ row: true, active: layout === 'double' })}\n            onClick={() => handleClick(pageTransition, 'double')}\n            dataElement=\"doubleLayoutButton\"\n          >\n            <Button\n              title=\"option.layout.double\"\n              img=\"icon-header-page-manipulation-page-layout-double-page-line\"\n              isActive={layout === 'double'}\n              role=\"option\"\n            />\n            <div className=\"title\">{t('option.layout.double')}</div>\n          </DataElementWrapper>\n          <DataElementWrapper\n            className={classNames({ row: true, active: layout === 'cover' })}\n            onClick={() => handleClick(pageTransition, 'cover')}\n            dataElement=\"coverLayoutButton\"\n          >\n            <Button\n              title=\"option.layout.cover\"\n              img=\"icon-header-page-manipulation-page-layout-cover-line\"\n              isActive={layout === 'cover'}\n              role=\"option\"\n            />\n            <div className=\"title\">{t('option.layout.cover')}</div>\n          </DataElementWrapper>\n          {showCompareButton && (\n            <DataElementWrapper\n              className={classNames({ row: true, active: isMultiViewerMode })}\n              onClick={toggleCompareMode}\n              dataElement=\"toggleCompareModeButton\"\n            >\n              <Button\n                title=\"action.comparePages\"\n                img=\"icon-header-compare\"\n                isActive={isMultiViewerMode}\n                role=\"option\"\n              />\n              <div className=\"title\">{t('action.comparePages')}</div>\n            </DataElementWrapper>\n          )}\n        </>\n      )}\n      {renderFullScreenToggle()}\n    </FlyoutMenu>\n  );\n}\n\nexport default ViewControlsOverlay;\n","import ViewControlsOverlay from './ViewControlsOverlay';\n\nexport default ViewControlsOverlay;"],"sourceRoot":""}