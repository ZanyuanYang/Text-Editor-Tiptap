{"version":3,"sources":["webpack:///./src/ui/src/components/PageManipulationOverlay/PageRotationControls/PageRotationControls.js","webpack:///./src/ui/src/components/PageManipulationOverlay/PageRotationControls/PageRotationControlsContainer.js","webpack:///./src/ui/src/components/PageManipulationOverlay/PageRotationControls/index.js"],"names":["PageRotationControls","props","t","useTranslation","rotateClockwise","rotateCounterClockwise","DataElementWrapper","dataElement","className","onClick","Button","title","img","role","propTypes","pageNumbers","PropTypes","arrayOf","number","warn","bool","PageRotationControlsContainer","dispatch","useDispatch","noPagesSelectedWarning","isMobile","actions","closeElement","DataElements","PAGE_MANIPULATION_OVERLAY"],"mappings":"yIA+CeA,MAzCf,SAA8BC,GAC5B,IAAQC,EAAMC,cAAND,EACAE,EAA4CH,EAA5CG,gBAAiBC,EAA2BJ,EAA3BI,uBAGzB,OACE,oCACE,kBAACC,EAAA,EAAkB,CACjBC,YAAY,qBACZC,UAAU,QAETN,EAAE,kBAEL,kBAACI,EAAA,EAAkB,CACjBC,YAAY,sBACZC,UAAU,MACVC,QAASL,GAET,kBAACM,EAAA,EAAM,CACLC,MAAM,yBACNC,IAAI,6DACJC,KAAK,WAEP,yBAAKL,UAAU,SAASN,EAAE,4BAE5B,kBAACI,EAAA,EAAkB,CACjBC,YAAY,6BACZC,UAAU,MACVC,QAASJ,GAET,kBAACK,EAAA,EAAM,CACLC,MAAM,gCACNC,IAAI,oEACJC,KAAK,WAEP,yBAAKL,UAAU,SAASN,EAAE,qC,sDChC5BY,EAAY,CAChBC,YAAaC,IAAUC,QAAQD,IAAUE,QACzCC,KAAMH,IAAUI,MAGlB,SAASC,EAA8BpB,GACrC,IAAMqB,EAAWC,cACTR,EAAsBd,EAAtBc,YAAaI,EAASlB,EAATkB,KAkBrB,OACE,kBAAC,EAAoB,CACnBd,uBAlB6B,WAC3Bc,GACDK,YAAuBT,EAAaO,IAAajB,YAAuBU,GAEzEV,YAAuBU,GAEzBU,eAAcH,EAASI,IAAQC,aAAaC,IAAaC,6BAavDzB,gBAXsB,WACpBe,GACDK,YAAuBT,EAAaO,IAAalB,YAAgBW,GAElEX,YAAgBW,GAElBU,eAAcH,EAASI,IAAQC,aAAaC,IAAaC,+BAU7DR,EAA8BP,UAAYA,EAE3BO,QC1CArB","file":"chunks/12.chunk.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DataElementWrapper from 'components/DataElementWrapper';\nimport Button from 'components/Button';\n\n\nfunction PageRotationControls(props) {\n  const { t } = useTranslation();\n  const { rotateClockwise, rotateCounterClockwise } = props;\n\n\n  return (\n    <>\n      <DataElementWrapper\n        dataElement=\"pageRotationHeader\"\n        className=\"type\"\n      >\n        {t('action.rotate')}\n      </DataElementWrapper>\n      <DataElementWrapper\n        dataElement=\"rotatePageClockwise\"\n        className=\"row\"\n        onClick={rotateClockwise}\n      >\n        <Button\n          title=\"action.rotateClockwise\"\n          img=\"icon-header-page-manipulation-page-rotation-clockwise-line\"\n          role=\"option\"\n        />\n        <div className=\"title\">{t('action.rotateClockwise')}</div>\n      </DataElementWrapper>\n      <DataElementWrapper\n        dataElement=\"rotatePageCounterClockwise\"\n        className=\"row\"\n        onClick={rotateCounterClockwise}\n      >\n        <Button\n          title=\"action.rotateCounterClockwise\"\n          img=\"icon-header-page-manipulation-page-rotation-counterclockwise-line\"\n          role=\"option\"\n        />\n        <div className=\"title\">{t('action.rotateCounterClockwise')}</div>\n      </DataElementWrapper>\n    </>\n  );\n}\n\nexport default PageRotationControls;","import React from 'react';\nimport PageRotationControls from './PageRotationControls';\nimport { noPagesSelectedWarning, rotateClockwise, rotateCounterClockwise } from 'helpers/pageManipulationFunctions';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport actions from 'actions';\nimport { isMobile } from 'helpers/device';\nimport DataElements from 'constants/dataElement';\n\nconst propTypes = {\n  pageNumbers: PropTypes.arrayOf(PropTypes.number),\n  warn: PropTypes.bool,\n};\n\nfunction PageRotationControlsContainer(props) {\n  const dispatch = useDispatch();\n  const { pageNumbers, warn } = props;\n\n  const onRotateCounterClockwise = () => {\n    if (warn) {\n      !noPagesSelectedWarning(pageNumbers, dispatch) && rotateCounterClockwise(pageNumbers);\n    } else {\n      rotateCounterClockwise(pageNumbers);\n    }\n    isMobile() && dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n  };\n  const onRotateClockwise = () => {\n    if (warn) {\n      !noPagesSelectedWarning(pageNumbers, dispatch) && rotateClockwise(pageNumbers);\n    } else {\n      rotateClockwise(pageNumbers);\n    }\n    isMobile() && dispatch(actions.closeElement(DataElements.PAGE_MANIPULATION_OVERLAY));\n  };\n  return (\n    <PageRotationControls\n      rotateCounterClockwise={onRotateCounterClockwise}\n      rotateClockwise={onRotateClockwise}\n    />\n  );\n}\n\nPageRotationControlsContainer.propTypes = propTypes;\n\nexport default PageRotationControlsContainer;","import PageRotationControls from './PageRotationControlsContainer';\n\nexport default PageRotationControls;"],"sourceRoot":""}